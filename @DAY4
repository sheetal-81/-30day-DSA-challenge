Sam want to read exactly ‘TARGET’ number of pages.He has an array ‘BOOK’ containing the number of pages for ‘N’ books.
Return YES/NO, if it is possible for him to read any 2 books and he can meet his ‘TARGET’ number of pages.
Example:        Input: ‘N’ = 5, ‘TARGET’ = 5        ‘BOOK’ = [4, 1, 2, 3, 1]        Output: YES
Explanation:Sam can buy 4 pages book and 1 page book.

import java.util.*;
public class Solution {
    public static String read(int n, int []book, int target){
        // Write your code here.
        Arrays.sort(book);
        int i=0;
        int j=n-1;
        while(i<j)
        {
            if(book[i]+book[j]==target)
            {
                return "YES";
            }
            else if(book[i]+book[j]<target)
            {
                i++;
            }       
            else
            {
                j--;
            }
        }
        return "NO";
    }
}


(2)
You are given an array ‘NUMS’ of length ‘N’. You are also given an integer ‘TARGET’
Return an array of all the unique quadruplets [ ‘NUMS[ a ]’, ‘NUMS[ b ]’, ‘NUMS[ c ]’, ‘NUMS[ d ]’ ] with the following conditions:
i. 0 <= a, b, c, d < ‘N’ and a, b, c, and d are distinct.
ii. NUMS[ a ] + NUMS[ b ] + NUMS[ c ] +NUMS[ d ] = TARGE
Return the array in any order.

import java.util.*;
public class Solution {
    public static List<List<Integer>> fourSum(int []nums, int target) {
        // Write your code here.
        int n=nums.length;
        Set<List<Integer>>a=new HashSet<>();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                Set<Long>Hash=new HashSet<>();
                for(int k=j+1;k<n;k++)
                {
                    long sum=nums[i]+nums[j]+nums[k];
                    //sum=sum+nums[k];
                    long fourth=target-sum;
                    if(Hash.contains(fourth))
                    {
                        List<Integer>temp=new ArrayList<>();
                        temp.add(nums[i]);
                        temp.add(nums[j]);
                        temp.add(nums[k]);
                        temp.add(int(fourth));
                        temp.sort(Integer::compareTo);
                    }
                }   Hash.add((long)nums[k]);
            }
        
        }
        return new ArrayList<>(a);
    }
}




(3)
You are given an unsorted array/list 'ARR' of 'N' integers. Your task is to return the length of the longest consecutive sequence.
The consecutive sequence is in the form ['NUM', 'NUM' + 1, 'NUM' + 2, ..., 'NUM' + L] where 'NUM' is the starting integer of the sequence and 'L' + 1 is the length of the sequence.
Note:
If there are any duplicates in the given array we will count only one of them in the consecutive sequence.
For example-
For the given 'ARR' [9,5,4,9,10,10,6].

Output = 3
The longest consecutive sequence is [4,5,6].

import java.io.*;
import java.util.* ;

public class Solution {
    public static int lengthOfLongestConsecutiveSequence(int[] arr, int N) {
        // Write your code here.
        HashSet<Integer>set=new HashSet<Integer>();
        for(int num:arr)set.add(num);
        int longest=0;
        for(int num:set)
        {
            if(!set.contains(num-1))
            {
                int current=num;
                int streak=1;
                while(set.contains(current+1))
                {
                    current+=1;
                    streak+=1;
                }
                longest=Math.max(longest,streak);

            }
        }
        return longest;
    }
}
