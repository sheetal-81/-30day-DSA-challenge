
(1)
You have been given an array ‘a’ of ‘n’ unique non-negative integers.Find the second largest and second smallest element from the array.
Return the two elements (second largest and second smallest) as another array of size 2.
Example :
Input: ‘n’ = 5, ‘a’ = [1, 2, 3, 4, 5]
Output: [4, 2]
The second largest element after 5 is 4, and the second smallest element after 1 is 2.

import java.util.Arrays;
class Solution
{
        public static int[] get_second(int n, int[]a)
        {
                Arrays.sort(a);
                return new int[]{a[n-2],a[1]};
        }
}


(2)
import java.util.*;
class largest_element
{
	public static int largest_element(int arr[],int n)
	{
		int max=arr[0];
		for(int i=1;i<n;i++)
		{
			if(arr[i]>max)
			{
				max=arr[i];
			}
		}
		return max;
	}
}


(3)
You have been given an array ‘a’ of ‘n’ non-negative integers.You have to check whether the given array is sorted in the non-decreasing order or not.
Your task is to return 1 if the given array is sorted. Else, return 0.
Example :        Input: ‘n’ = 5, ‘a’ = [1, 2, 3, 4, 5]        Output: 1
The given array is sorted in non-decreasing order; hence the answer will be 1.

class solution
{
        public static int isSorted(int n,int[]a)
        {
                for(int i=0;i<n-1;i++)
                {
                        if(a[i]>a[i+1])
                        {
                                return 0;
                        }
                }
                return 1;
        }
}


(4)
Check if Array Is Sorted and Rotated Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.
There may be duplicates in the original array.
Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].

Example 2:
Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.

Example 3:
Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.

class solution
{
        public boolean check(int[]nums)
        {
                int count=0;
                for(int i=0;i<nums.length;i++)
                {
                        if(nums[i]>nums[(i+1)%nums.length)
                        {
                                count++;
                        }
                        if(count>1)
                        {
                                return false;
                        }
                }
                return true;
        }
}


(5)
You are given a sorted integer array 'arr' of size 'n'.You need to remove the duplicates from the array such that each element appears only once.Return the length of this new array.
'n' = 5, 'arr' = [1 2 2 2 3].
The new array will be [1 2 3].
So our answer is 3.

public class Solution {
    public static int removeDuplicates(int[] arr,int n) {
        // Write your code here.
        if(n==0 ||n==1)
        {
            return n;
        }
        int count=0;
        for(int i=0;i<n-1;i++)
        {
            if(arr[i]!=arr[i+1])
            {
                arr[count++]=arr[i];
            }
        }
        arr[count++]=arr[n-1];
        
        return count;
    }
}


(6)
Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. 
The relative order of the elements should be kept the same. Then return the number of unique elements in nums.
Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. 
The remaining elements of nums are not important as well as the size of nums. Return k.

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums.length==0)
        {
            return 0;
        }
        int count=0;
        for(int i=0;i<nums.length-1;i++)
        {
            if(nums[i]!=nums[i+1])
            {
                count++;
                nums[count]=nums[i+1];
            }
        }
        return count+1;
}
}


(7)
Given an array 'arr' containing 'n' elements, rotate this array left once and return it.
Rotating the array left by one means shifting all elements by one place to the left and moving the first element to the last position in the array.
Example:-	Input: 'a' = 5, 'arr' = [1, 2, 3, 4, 5]		Output: [2, 3, 4, 5, 1]
moved the 2nd element to the 1st position, and 3rd element to the 2nd position, and 4th element to the 3rd position, and the 5th element to the 4th position, and move the 1st element to the 5th position.
class solution
{
        public static left_shift(int n,int[]arr)
        {
                if(arr==null || arr.length<=1)
                {
                        return arr;
                }
                int first_element=arr[0];
                for(int i=0;i<n-1;i++)
                {
                        arr[i]=arr[i+1];
                }
                arr[arr.length-1]=arr[first_element];
                return arr;
        }
}


(8)
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

class Solution {
    public void rotate(int[] nums, int k) {
        int n = nums.length;
        if(n == k || k == 0) {
            return;
        }
        int[] nums2 = new int[n];
        int idx = 0;
        for(int x: nums) {
            nums2[idx++] = x;
        }
        for(int i = 0;i<n; i++) {
            nums[(i+k)%n] = nums2[i];
        }
    }
}


(9)
Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.

class Solution 
{
    	public int missingNumber(int[] nums) 
	{
	        int arr=0;
	        int len=0;
	        for(int j=1;j<=nums.length;j++)
	        {
	            arr=arr+nums[j-1];
	            len=len+j;
	        }
	        return len-arr;
    }
}


(10)
Given a binary array nums, return the maximum number of consecutive 1's in the array.
Example 1:	Input: nums = [1,1,0,1,1,1]	Output: 3	Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
Example 2:	Input: nums = [1,0,1,1,0,1]	Output: 2

class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int ans=0;
        int sum=0;
        for(int n:nums)
        {
            sum=sum*n;
            sum=sum+n;
            ans=Math.max(ans,sum);
        }
        return ans;
    }
}


(11)
You are given a sorted array 'arr' of positive integers of size 'n'. It contains each number exactly twice except for one number, which occurs exactly once. Find the number that occurs exactly once.
Example :	Input: ‘arr’ = {1, 1, 2, 3, 3, 4, 4}.	Output: 2	Explanation: 1, 3, and 4 occur exactly twice. 2 occurs exactly once. Hence the answer is 2.

public class Solution 
{
    public static int getSingleElement(int []arr)
	{
		int n=arr.length;
		int xorr=0;
		for(int i=0;i<n;i++)
		{
			xorr=xorr^arr[i];
		}
		return arr;
	}
}


(12)
You are given an array 'a' of size 'n' and an integer 'k'. Find the length of the longest subarray of 'a' whose sum is equal to 'k'.
Example :	Input: ‘n’ = 7 ‘k’ = 3	‘a’ = [1, 2, 3, 1, 1, 1, 1]	Output: 3	Explanation: Subarrays whose sum = ‘3’ are:	[1, 2], [3], [1, 1, 1] and [1, 1, 1]
Here, the length of the longest subarray is 3, which is our final answer.

public class Solution {
    public static int longestSubarrayWithSumK(int []a, long k) {
        // Write your code here
        int n=a.length;
        int len=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                long s=0;
                for(int z=i;z<=j;z++)
                {
                    s=s+a[z];
                }
                if(s==k)
                {
                    len=Math.max(len,j-i+1);
                }
            }
        }
        return len;
    }
}


(13)
import java.util.* ;
import java.io.*; 
public class Solution {
	public static int getLongestSubarray(int []nums, int k) {
		// Write your code here.
		 int n=nums.length;
        int len=0;
        for(int i=0;i<n;i++)
        {
            for(int j=i;j<n;j++)
            {
                long s=0;
                for(int z=i;z<=j;z++)
                {
                    s=s+nums[z];
                }
                if(s==k)
                {
                    len=Math.max(len,j-i+1);
                }
            }
        }
        return len;
	}
}

(14)
Problem statement
You are given an array ‘a’ of ‘n’ integers.You have to return the lexicographically next to greater permutation.
Note:If such a sequence is impossible, it must be rearranged in the lowest possible order.
Example:	Input: 'a' = [1, 3, 2]	Output: 2 1 3
Explanation: All the permutations of [1, 2, 3] are [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1], ]. Hence the next greater permutation of [1, 3, 2] is [2, 1, 3]

import java.util.*;
public class Solution {
    public static List<Integer> nextGreaterPermutation(List<Integer> A) {
        int i = A.size() - 2;
        while (i >= 0 && A.get(i + 1) <= A.get(i)) {
            i--;
        }
        if (i >= 0) {
            int j = A.size() - 1;
            while (j >= 0 && A.get(j) <= A.get(i)) {
                j--;
            }
            Collections.swap(A, i, j);
        }
        Collections.reverse(A.subList(i + 1, A.size()));
        return A;
    }

    public static void main(String[] args) {
        List<Integer> nums = Arrays.asList(1, 3, 2);
        System.out.println(nextGreaterPermutation(nums));
    }
}


(15)
You are given an array 'arr' of length 'n', consisting of integers.
A subarray is a contiguous segment of an array. In other words, a subarray can be formed by removing 0 or more integers from the beginning and 0 or more integers from the end of an array.
Find the sum of the subarray (including empty subarray) having maximum sum among all subarrays.
The sum of an empty subarray is 0.
Example :	Input: 'arr' = [1, 2, 7, -4, 3, 2, -10, 9, 1]	Output: 11	Explanation: The subarray yielding the maximum sum is [1, 2, 7, -4, 3, 2].

import java.util.* ;
import java.io.*; 

public class Solution {
	
	public static long maxSubarraySum(int[] arr, int n) {
		if(arr.length==1)
		{
			return arr[0] > 0 ? arr[0] : 0;
		}
		int maxSum=0;
		int currSum=0;
		boolean allNegative = true;
		for(int i=0;i<arr.length;i++)
		{
			if(arr[i] > 0) {
				allNegative = false;
			}
			currSum+=arr[i];
			if(currSum>maxSum)
			{
				maxSum=currSum;
			}
			if(currSum<0)
			{
				currSum=0;
			}
		}
		return allNegative ? 0 : maxSum;
	}

}


