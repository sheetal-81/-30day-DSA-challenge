(1)
You have been given a 2-D array 'mat' of size 'M x N' where 'M' and 'N' denote the number of rows and columns, respectively. The elements of each row are sorted in non-decreasing order.
Moreover, the first element of a row is greater than the last element of the previous row (if it exists).
You are given an integer ‘target’, and your task is to find if it exists in the given 'mat' or not.
Example:	Input: ‘M’ = 3, 'N' = 4, ‘mat’ = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], ‘target’ = 8	Output: true	Explanation: The output should be true as '8' exists in the matrix.

import java.util.ArrayList;
public class Solution {
    static boolean searchMatrix(ArrayList<ArrayList<Integer>> mat, int target) {
        // Write your code here.
        int m=mat.size();
        if(m==0)
        {
            return false;
        }
        int n=mat.get(0).size();
        //Apply binary search
        int left=0;
        int right=m*n-1;
        while(left<=right)
        {
            int pivot_ind=(left+right)/2;
            int pivot_elmnt=mat.get(pivot_ind/n).get(pivot_ind%n);
            if(target==pivot_elmnt)
            {
                return true;
                
            }
            else
            {
                if(target<pivot_elmnt)
                {
                    right=pivot_ind-1;
                }
                else
                {
                    left=pivot_ind+1;
                }
                
            }
        }
        return false;
    }
}




(2)
You are given two numbers ’x’(it’s a float), and ’n’(it’s a integer).
Your task is to calculate ‘x’ raised to power ‘n’, and return it.
The expected time complexity is ’O(logn)’, and the expected space complexity is ’O(1)’, where ‘n’ is the power to which the number should be raised.
Note:	In the output, you will see the number returned by you upto 6 decimal places.
Example:	Input: ‘x’ = 10, ‘n’ = 4	Output: 10000.000000	Explanation: On raising ‘x’ to the power of ‘n’, the result is 10000.

public class Solution {
    public static double myPow(double x, int n) {
        // Write Your Code Here
        return Math.pow(x,n);
    }
}




(3)
You are given an array 'a' of 'n' integers.A majority element in the array ‘a’ is an element that appears more than 'n' / 2 times.
Find the majority element of the array.It is guaranteed that the array 'a' always has a majority element.
Example:	Input: ‘n’ = 9, ‘a’ = [2, 2, 1, 3, 1, 1, 3, 1, 1]	Output: 1
Explanation: The frequency of ‘1’ is 5, which is greater than 9 / 2.	Hence ‘1’ is the majority element.

import java.util.*;
public class Solution {
    public static int majorityElement(int []v) {
        // Write your code here
        Arrays.sort(v);
        return v[v.length/2];
    

    }
}




(4)
Given an array ‘A’ of ‘N’ integers, find the majority elements of the array.
A majority element in an array ‘A’ of size ‘N’ is an element that appears more than floor(N / 3) times.
Note: The floor function returns the number rounded down to the nearest integer.
Note: Return the array of majority elements in sorted order.
Example:	Input: ‘N’ = 9 ‘A’ = [2, 2, 1, 3, 1, 1, 3, 1, 1]	Output: 1
Explanation: The frequency of ‘1’ is 5, which is greater than floor(N / 3), hence ‘1’ is the majority element.

import java.util.*;

public class Solution {
    public static List<Integer> majorityElement(int[] v) {
        if (v == null || v.length == 0) {
            return new ArrayList<>();
        }
        
        List<Integer> result = new ArrayList<>();
        int count1 = 0, count2 = 0, candidate1 = v[0], candidate2 = v[0];
        
        for (int num : v) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }
        
        count1 = 0;
        count2 = 0;
        
        for (int num : v) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }
        
        if (count1 > v.length / 3) {
            result.add(candidate1);
        }
        if (count2 > v.length / 3) {
            result.add(candidate2);
        }
        
        return result;
    }
}




(5)
You are present at point ‘A’ which is the top-left cell of an M X N matrix, your destination is point ‘B’, which is the bottom-right cell of the same matrix. Your task is to find the total number of unique paths from point ‘A’ to point ‘B’.In other words, you will be given the dimensions of the matrix as integers ‘M’ and ‘N’, your task is to find the total number of unique paths from the cell MATRIX[0][0] to MATRIX['M' - 1]['N' - 1].
To traverse in the matrix, you can either move Right or Down at each step. For example in a given point MATRIX[i] [j], you can move to either MATRIX[i + 1][j] or MATRIX[i][j + 1].
Where ‘M’ is the number of rows and ‘N’ is the number of columns in the matrix. 

import java.util.*;

public class Solution {
    public static int uniquePaths(int m, int n) {
        int[][] dp = new int[m+1][n+1];
        for (int[] arr : dp) {
            Arrays.fill(arr, -1);
        }
        return helper(m, n, dp);
    }

    private static int helper(int m, int n, int[][] dp) {
        if (m == 1 && n == 1) {
            return 1;
        }
        if (dp[m][n] != -1) {
            return dp[m][n];
        }
        int count = 0;
        if (m >= 1) {
            count += helper(m-1, n, dp);
        }
        if (n >= 1) {
            count += helper(m, n-1, dp);
        }
        return dp[m][n] = count;
    }
}





(6)
You are given an array/list say ‘ARR’ of size ‘N’. We call pair (i, j) a Reverse Pair when i < j and 'ARR[i]' > 2 * 'ARR[j]'.
Your task is to find the number of Reverse Pairs present in given 'ARR'.
For example :	For the array [50, 21, 9], if we follow 1-based indexing, the Reverse Pairs are (1, 2), (1, 3) and (2, 3). Thus, the total count i.e. the answer becomes 3.
Note :	A single index of the pair (i, j) can be used multiple time

import java.util.* ;
import java.io.*;
public class Solution 
{
    public static void merge(int[] nums, int low, int high, int mid){
        int len1 = mid - low + 1;
        int len2 = high - mid;
        int[] first = new int[len1];
        int[] second = new int[len2];
        int mainArrayIndex = low;
        for(int i = 0; i < len1; i++){
            first[i] = nums[mainArrayIndex++];
        }
        for(int i = 0; i < len2; i++){
            second[i] = nums[mainArrayIndex++];
        }
        mainArrayIndex = low;

        int index1 = 0, index2 = 0;

        while(index1 < len1 && index2 < len2){

            if(first[index1] <= second[index2]){

                nums[mainArrayIndex++] = first[index1++];

            }else{

                nums[mainArrayIndex++] = second[index2++];

            }

        }

        while(index1 < len1){

            nums[mainArrayIndex++] = first[index1++];

        }

        while(index2 < len2){

            nums[mainArrayIndex++] = second[index2++];

        }

    }

 

    public static int mergeSort(int[] nums, int low, int high){

        int count = 0;

        if(low >= high){

            return count;

        }

        int mid = low + (high-low)/2;

        count += mergeSort(nums, low, mid);

        count += mergeSort(nums, mid+1, high);

        count += countPairs(nums, low, mid, high);

        merge(nums, low, high, mid);

        return count;

    }

 

    public static int countPairs(int[] nums, int low , int mid, int high){

        int right = mid+1;

        int count = 0;

        for(int i = low; i <= mid; i++){

            while(right <= high && nums[i] > 2*nums[right])right++;

            count += (right - (mid + 1));

        }

        return count;

    }

 

    public static int reversePairs(ArrayList<Integer> arr) 

    {

        int n = arr.size();

        int arr1[] = new int[n];

        for (int i = 0; i < n; i++) {

            arr1[i] = arr.get(i);

        }

        return mergeSort(arr1, 0, n-1);

    }

}



(7)//leetcode
Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:0 <= i < j < nums.length and nums[i] > 2 * nums[j].

Example 1:
Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1

Example 2:
Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1


import java.util.* ;
import java.io.*; 
import java.util.ArrayList;


public class Solution {
    public int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }

    private int mergeSort(int[] nums, int low, int high) {
        if (low >= high) return 0;
        int mid = low + (high - low) / 2;
        int count = mergeSort(nums, low, mid) + mergeSort(nums, mid + 1, high);
        for (int i = low, j = mid + 1; i <= mid; i++) {
            while (j <= high && nums[i] > 2L * nums[j]) j++;
            count += j - (mid + 1);
        }
        Arrays.sort(nums, low, high + 1);
        return count;
    }
}

